{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thiago\\\\arlo-clothing\\\\src\\\\hooks\\\\useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@ArloClothing:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n      const stock = await api.get(`stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitade fora de estoque');\n        return;\n      }\n\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`products/${productId}`);\n        product.data.amount = 1;\n        updatedCart.push(product.data);\n      }\n\n      setCart(updatedCart);\n      localStorage.setItem('@ArloClothing:cart', JSON.stringify(updatedCart));\n      toast.success('Produto adicionado com sucesso');\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const UpdateProductAmount = async _ref2 => {\n    let {\n      productId,\n      amount\n    } = _ref2;\n\n    try {\n      if (amount <= 0) {\n        return;\n      }\n\n      const stock = await api.get(`stock/${productId}`);\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitade fora de estoque');\n        return;\n      }\n\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n\n      if (productExists) {\n        productExists.amount = amount;\n        setCart(updatedCart);\n        localStorage.setItem('@ArloClothing:cart', JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error('Erro na alteração da quantidade de produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const updatedCart = [...cart];\n      const productIndex = updatedCart.findIndex(product => product.id === productId);\n\n      if (productId >= 0) {\n        updatedCart.splice(productIndex, 1);\n        setCart(updatedCart);\n        localStorage.setItem('@ArloClothing:cart', JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error('Erro na remoção de produto');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"vE5ZL/0tldyTBQxxfqAkXngr67k=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/Thiago/arlo-clothing/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","updatedCart","productExists","find","product","id","stock","get","stockAmount","data","amount","currentAmount","error","push","setItem","stringify","success","UpdateProductAmount","Error","removeProduct","productIndex","findIndex","splice","useCart","context"],"mappings":"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","sourcesContent":["import {createContext, ReactNode, useContext, useState} from 'react'\r\nimport { toast } from 'react-toastify'\r\nimport { api } from '../services/api'\r\n\r\ninterface CartProviderProps {\r\n    children: ReactNode\r\n}\r\n\r\ninterface UpdateProductAmount{\r\n    productId: number\r\n    amount: number\r\n}\r\n\r\ninterface Stock{\r\n    id: number\r\n    amount: number\r\n}\r\n\r\ninterface Product {\r\n    id: number\r\n    title: string\r\n    price: number\r\n    image: string\r\n    amount:number\r\n}\r\n\r\ninterface CartContextData {\r\n    cart: Product[]\r\n    addProduct: (productId: number) => Promise<void>\r\n    updateProductAmount : ({productId, amount}: UpdateProductAmount) => void\r\n    remoteProduct: (productId:number) => void\r\n}\r\n\r\nconst CartContext = createContext<CartContextData>({} as CartContextData)\r\n\r\nexport const CartProvider = ({children}: CartProviderProps) => {\r\n    const[cart, setCart] = useState<Product[]>(() => {\r\n        const storagedCart = localStorage.getItem \r\n        ('@ArloClothing:cart')\r\n\r\n        if(storagedCart){\r\n            return JSON.parse(storagedCart)\r\n        }\r\n        return[]\r\n    })\r\n\r\n    const addProduct = async (productId: number) => {\r\n        try{\r\n            const updatedCart = [...cart]\r\n\r\n            const productExists = updatedCart.find(product => product.id === productId)\r\n\r\n            const stock = await api.get(`stock/${productId}`)\r\n\r\n            const stockAmount = stock.data.amount\r\n\r\n            const currentAmount = productExists ? productExists.amount : 0\r\n\r\n            const amount = currentAmount + 1\r\n\r\n            if (amount > stockAmount){\r\n                toast.error('Quantidade solicitade fora de estoque')\r\n                return\r\n            }\r\n\r\n            if(productExists){\r\n                productExists.amount = amount\r\n            }else{\r\n                const product = await api.get(`products/${productId}`)\r\n                product.data.amount = 1\r\n                updatedCart.push(product.data)\r\n            }\r\n\r\n            setCart(updatedCart)\r\n            localStorage.setItem('@ArloClothing:cart', JSON.stringify\r\n            (updatedCart))\r\n            \r\n            toast.success('Produto adicionado com sucesso')\r\n\r\n        } catch{\r\n            toast.error('Erro na adição do produto')\r\n        }\r\n    }\r\n    \r\n    const UpdateProductAmount = async ({ productId, amount}:UpdateProductAmount) => {\r\n        try{\r\n            if(amount <= 0 ){\r\n                return\r\n            }\r\n\r\n            const stock = await api.get<Stock>(`stock/${productId}`)\r\n            const stockAmount = stock.data.amount\r\n\r\n            if(amount > stockAmount){\r\n                toast.error('Quantidade solicitade fora de estoque')\r\n                return\r\n            }\r\n\r\n            const updatedCart = [...cart]\r\n            const productExists = updatedCart.find(\r\n                product => product.id === productId\r\n            )\r\n            if(productExists){\r\n                productExists.amount = amount\r\n                setCart(updatedCart)\r\n                localStorage.setItem('@ArloClothing:cart',JSON.stringify\r\n                (updatedCart))\r\n            }else{\r\n                throw Error()\r\n            }\r\n\r\n\r\n        } catch {\r\n            toast.error('Erro na alteração da quantidade de produto')\r\n        }\r\n    }\r\n\r\n    const removeProduct = (productId: number) => {\r\n        try{\r\n            const updatedCart = [...cart]\r\n            const productIndex = updatedCart.findIndex(\r\n                product => product.id === productId\r\n            )\r\n\r\n            if(productId >= 0){\r\n                updatedCart.splice(productIndex, 1)\r\n\r\n                setCart(updatedCart)\r\n                localStorage.setItem('@ArloClothing:cart',JSON.stringify\r\n                (updatedCart))\r\n            }else{\r\n                throw Error()\r\n            }\r\n        } catch{\r\n            toast.error('Erro na remoção de produto')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CartContext.Provider value={{cart , addProduct}}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useCart(): CartContextData{\r\n    const context = useContext(CartContext)\r\n    return context\r\n}"]},"metadata":{},"sourceType":"module"}